use std::slice;
// —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –∫–æ—Ç–æ—Ä—ã–º vba –ø–æ–ª—É—á–∏—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –ø–∞–º—è—Ç–∏, #[repr(C)] –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –ø–æ–ª—è –≤ –ø–æ—Ä—è–¥–∫–µ –∫–∞–∫ –∑–∞–¥–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç
#[repr(C)]
pub struct StringWrapForVBA {
    ptr: *mut u16,
    length_in_bytes: i32,
    _data: Box<Vec<u16>>, // —ç—Ç–æ –ø–æ–ª–µ –Ω–µ –±—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å—Å—è VBA –∏ –æ–Ω–æ —Ç—É—Ç –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Å –ø–æ–ª–µ–º "ptr" –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã vba —á–∏—Ç–∞–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π "ptr"
}

#[no_mangle]
pub extern "stdcall" fn send_request(bstr_sql_code_ptr: *const u16) -> *mut StringWrapForVBA {
    // –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏

    // let len_bstr_ptr = unsafe { bstr_sql_code.offset(-4) as *const u32 };

    // let len_bstr: u32 = unsafe {
    //     *len_bstr_ptr
    //     //std::ptr::read_unaligned(len_ptr) as usize
    // };






    // –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ *const u16 –≤ String
    // let sql_code = unsafe {
    //     let slice = slice::from_raw_parts(bstr_sql_code, 2); // —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–µ–∑–∞
    //     String::from_utf16(slice).unwrap() // –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ String
    // };

    // let text = getDatabaseResponse(sql_code);
    // let text = len_bstr.to_string();




    // let text = format!("{:p}", bstr_sql_code_ptr);
    let text = format!("rust-–∞–¥—Ä–µ—Å: {}", bstr_sql_code_ptr as usize);





    // let text = sql_code;
    let sending_data = get_string_wrap_for_vba(text);

    Box::into_raw(Box::new(sending_data))
}

fn get_string_wrap_for_vba(text: String) -> StringWrapForVBA {
    //.encode_utf16() –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã Unicode (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä 16-–±–∏—Ç–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-16).
    let data: Vec<u16> = text.encode_utf16().collect();
    let length_in_bytes: i32 = (text.encode_utf16().count() * std::mem::size_of::<u16>())
        .try_into()
        .unwrap();

    let boxed_data = Box::new(data);
    let ptr = boxed_data.as_ptr() as *mut u16;

    StringWrapForVBA {
        ptr,
        length_in_bytes,
        _data: boxed_data,
    }
}

#[no_mangle]
pub extern "stdcall" fn free_data(ptr: *mut StringWrapForVBA) {
    unsafe {
        // –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        drop(Box::from_raw(ptr));
    }
}

fn getDatabaseResponse(query: String) -> String {
    let database_response = "–æ—Ç–≤–µ—Çêê∑".to_string();
    database_response
}

#[cfg(test)]
mod tests {
    #[test]
    fn test() {}
}