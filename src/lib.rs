use std::slice;
// —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –∫–æ—Ç–æ—Ä—ã–º vba –ø–æ–ª—É—á–∏—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –ø–∞–º—è—Ç–∏, #[repr(C)] –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –ø–æ–ª—è –≤ –ø–æ—Ä—è–¥–∫–µ –∫–∞–∫ –∑–∞–¥–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç
#[repr(C)]
pub struct StringWrapForVBA {
    ptr: *mut u16,
    length_in_bytes: i32,
    _data: Box<Vec<u16>>, // —ç—Ç–æ –ø–æ–ª–µ –Ω–µ –±—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å—Å—è VBA –∏ –æ–Ω–æ —Ç—É—Ç –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Å –ø–æ–ª–µ–º "ptr" –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã vba —á–∏—Ç–∞–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π "ptr"
}

#[no_mangle]
pub extern "stdcall" fn send_request(ptr: *const u16) -> *mut StringWrapForVBA {
    let sql_query = get_string_from_vba(ptr);

    let text = format!("–∑–∞–ø—Ä–æ—Å: {}\n\n–±–∞–π—Ç—ã: {}", sql_query, getBytes(&sql_query));
    get_string_ptr_for_vba(text)
}


#[no_mangle]
pub extern "stdcall" fn free_data(ptr: *mut StringWrapForVBA) {
    unsafe {
        // –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        drop(Box::from_raw(ptr));
    }
}


fn get_string_from_vba(bstr_ptr: *const u16) -> String{
    // –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏
    let bstr_len_ptr = unsafe {bstr_ptr.offset(-2) as *const u32 };

    let bstr_len_in_bytes: u32 = unsafe { std::ptr::read_unaligned(bstr_len_ptr) };

    // —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–µ–∑–∞: –≤—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —ç—Ç–æ —á–∏—Å–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–π, –¥–ª–∏–Ω–∞ –∏—Ç–µ—Ä–∞–Ω—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —Ç–∏–ø—É —É–∫–∞–∑–∞—Ç–µ–ª—è (2 –±–∞–π—Ç–∞ —É –Ω–∞—Å)
    let slice = unsafe { slice::from_raw_parts(bstr_ptr, (bstr_len_in_bytes / 2) as usize) }; // —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ä–µ–∑–∞
    String::from_utf16(slice).unwrap()
}


fn get_string_ptr_for_vba(text: String) -> *mut StringWrapForVBA {
    //.encode_utf16() –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã Unicode (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä 16-–±–∏—Ç–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-16).
    let data: Vec<u16> = text.encode_utf16().collect();
    let length_in_bytes: i32 = (text.encode_utf16().count() * std::mem::size_of::<u16>())
        .try_into()
        .unwrap();

    let boxed_data = Box::new(data);
    let ptr = boxed_data.as_ptr() as *mut u16;

    let sending_data = StringWrapForVBA {
        ptr,
        length_in_bytes,
        _data: boxed_data,
    };
    Box::into_raw(Box::new(sending_data))
}


fn getDatabaseResponse(query: String) -> String {
    let database_response = "–æ—Ç–≤–µ—Çêê∑".to_string();
    database_response
}


fn getBytes(text: &str) -> String {
    let bytes = text.as_bytes();
    let hex_string = bytes
        .iter()
        .map(|&byte| format!("{:02X}", byte))
        .collect::<Vec<String>>()
        .join("");
    hex_string
}


#[cfg(test)]
mod tests {
    #[test]
    fn test() {}
}
