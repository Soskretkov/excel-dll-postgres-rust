// —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –∫–æ—Ç–æ—Ä—ã–º vba –ø–æ–ª—É—á–∏—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –ø–∞–º—è—Ç–∏, #[repr(C)] –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –ø–æ–ª—è –≤ –ø–æ—Ä—è–¥–∫–µ –∫–∞–∫ –∑–∞–¥–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç
#[repr(C)]
pub struct StringWrapsForVBA {
    ptr: *mut u16,
    length_in_bytes: i32,
    _data: Box<Vec<u16>>, // —ç—Ç–æ –ø–æ–ª–µ –±—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å—Å—è VBA
}

#[no_mangle]
pub extern "stdcall" fn send_request() -> *mut StringWrapsForVBA {
    let text = getDatabaseResponse();
    let sending_data = get_string_wrap(text);

    Box::into_raw(Box::new(sending_data))
}

fn get_string_wrap(text: String) -> StringWrapsForVBA {
    //.encode_utf16() –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—É—Ä—Ä–æ–≥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã Unicode (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–µ—Ç 16-–±–∏—Ç–Ω—ã–µ —é–Ω–∏—Ç—ã –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-16).
    //—Ç–æ–≥–¥–∞ –∫–∞–∫ chars().count() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ Unicode —Å–∫–∞–ª—è—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ, –Ω–µ –≤—Å–µ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É –≤ —Å—Ç—Ä–æ–∫–µ
    let data: Vec<u16> = text.encode_utf16().collect();
    let length_in_bytes: i32 = (text.encode_utf16().count() * std::mem::size_of::<u16>()).try_into().unwrap();

    let boxed_data = Box::new(data);
    let ptr = boxed_data.as_ptr() as *mut u16;

    StringWrapsForVBA {
        ptr,
        length_in_bytes,
        _data: boxed_data,
    }
}

#[no_mangle]
pub extern "stdcall" fn free_data(ptr: *mut StringWrapsForVBA) {
    unsafe {
        // –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        drop(Box::from_raw(ptr));
    }
}

fn getDatabaseResponse() -> String {
    let database_response = "–æ—Ç–≤–µ—Çêê∑".to_string();
    database_response
}

#[cfg(test)]
mod tests {
    #[test]
    fn test() {}
}